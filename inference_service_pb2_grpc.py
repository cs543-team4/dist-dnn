# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import inference_service_pb2 as inference__service__pb2


class InferenceServiceStub(object):
    """Tensor data transmitter
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.process_tensor = channel.unary_unary(
                '/InferenceService/process_tensor',
                request_serializer=inference__service__pb2.SerializedTensor.SerializeToString,
                response_deserializer=inference__service__pb2.Reply.FromString,
                )
        self.test_process = channel.unary_unary(
                '/InferenceService/test_process',
                request_serializer=inference__service__pb2.testData.SerializeToString,
                response_deserializer=inference__service__pb2.timeData.FromString,
                )
        self.split_model = channel.unary_unary(
                '/InferenceService/split_model',
                request_serializer=inference__service__pb2.slicingData.SerializeToString,
                response_deserializer=inference__service__pb2.Reply.FromString,
                )


class InferenceServiceServicer(object):
    """Tensor data transmitter
    """

    def process_tensor(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_process(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def split_model(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InferenceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'process_tensor': grpc.unary_unary_rpc_method_handler(
                    servicer.process_tensor,
                    request_deserializer=inference__service__pb2.SerializedTensor.FromString,
                    response_serializer=inference__service__pb2.Reply.SerializeToString,
            ),
            'test_process': grpc.unary_unary_rpc_method_handler(
                    servicer.test_process,
                    request_deserializer=inference__service__pb2.testData.FromString,
                    response_serializer=inference__service__pb2.timeData.SerializeToString,
            ),
            'split_model': grpc.unary_unary_rpc_method_handler(
                    servicer.split_model,
                    request_deserializer=inference__service__pb2.slicingData.FromString,
                    response_serializer=inference__service__pb2.Reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'InferenceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InferenceService(object):
    """Tensor data transmitter
    """

    @staticmethod
    def process_tensor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InferenceService/process_tensor',
            inference__service__pb2.SerializedTensor.SerializeToString,
            inference__service__pb2.Reply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def test_process(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InferenceService/test_process',
            inference__service__pb2.testData.SerializeToString,
            inference__service__pb2.timeData.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def split_model(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InferenceService/split_model',
            inference__service__pb2.slicingData.SerializeToString,
            inference__service__pb2.Reply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
