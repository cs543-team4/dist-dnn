# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import tensor_pb2 as tensor__pb2


class TransmitterStub(object):
    """Tensor data transmitter
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendTensor = channel.unary_unary(
            '/tensorflow.Transmitter/SendTensor',
            request_serializer=tensor__pb2.SerializedTensor.SerializeToString,
            response_deserializer=tensor__pb2.Reply.FromString,
        )


class TransmitterServicer(object):
    """Tensor data transmitter
    """

    def send_tensor(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_transmitter_servicer_to_server(servicer, server):
    rpc_method_handlers = {
        'SendTensor': grpc.unary_unary_rpc_method_handler(
            servicer.send_tensor,
            request_deserializer=tensor__pb2.SerializedTensor.FromString,
            response_serializer=tensor__pb2.Reply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'tensorflow.Transmitter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Transmitter(object):
    """Tensor data transmitter
    """

    @staticmethod
    def send_tensor(request,
                    target,
                    options=(),
                    channel_credentials=None,
                    call_credentials=None,
                    compression=None,
                    wait_for_ready=None,
                    timeout=None,
                    metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tensorflow.Transmitter/SendTensor',
                                             tensor__pb2.SerializedTensor.SerializeToString,
                                             tensor__pb2.Reply.FromString,
                                             options, channel_credentials,
                                             call_credentials, compression, wait_for_ready, timeout, metadata)
